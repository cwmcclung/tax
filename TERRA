# make sure to put the three media files (the ico, jpg, and mp3) in the same folder where you run the script

# imports
import os
import requests
from datetime import datetime
from openpyxl import Workbook
import tkinter as tk
from tkinter import ttk
from PIL import Image, ImageTk
import re
import pygame
from tkinter import font
from tkinter.simpledialog import askstring
import sys
from openpyxl.utils import get_column_letter

os.environ["SDL_AUDIODRIVER"] = "directsound"

# create dictionary of currency codes based on the various (arbitrary) discrepancies I've seen on the API output
# (update as needed when code is blank in output, can add to list here)
currency_codes = {
    "Afghanistan-Afghani": "AFN",
    "Albania-Lek": "ALL",
    "Algeria-Dinar": "DZD",
    "Angola-Kwanza": "AOA",
    "Antigua & Barbuda-E. Caribbean Dollar": "XCD",
    "Argentina-Peso": "ARP",
    "Armenia-Dram": "AMD",
    "Australia-Dollar": "AUD",
    "Austria-Euro": "EUR",
    "Azerbaijan-Manat": "AZN",
    "Bahamas-Dollar": "BSD",
    "Bahrain-Dinar": "BHD",
    "Bangladesh-Taka": "BDT",
    "Barbados-Dollar": "BBD",
    "Belarus-New Ruble": "BYN",
    "Belaruse-New Ruble": "BYN",
    "Belgium-Euro": "EUR",
    "Belize-Dollar": "BZD",
    "Benin-CFA Franc": "XOF",
    "Bermuda-Dollar": "BMD",
    "Bolivia-Boliviano": "BOB",
    "Bosnia-Marka": "BAM",
    "Botswana-Pula": "BWP",
    "Brazil-Real": "BRL",
    "Brunei-Dollar": "BND",
    "Bulgaria-Lev New": "BGN",
    "Burkina Faso-CFA Franc": "XOF",
    "Burma-Kyat": "MMK",
    "Burundi-Franc": "BIF",
    "Cambodia-Riel": "KHR",
    "Cameroon-CFA Franc": "CFA",
    "Canada-Dollar": "CAD",
    "Cape Verde-Escudo": "CVE",
    "Cayman Islands-Dollar": "KYD",
    "Cayman Island-Dollar": "KYD",
    "Central African Rep.-CFA Franc": "XOF",
    "Chad-CFA Franc": "XOF",
    "Chile-Peso": "CLP",
    "China-Renminbi": "RMB",
    "Colombia-Peso": "COP",
    "Comoros-Franc": "KMF",
    "Congo-CFA Franc": "XOF",
    "Costa Rica-Colon": "CRC",
    "Cote D'ivoire-CFA Franc": "XOF",
    "Croatia-Euro": "EUR",
    "Croatia-KUNA": "HRK",
    "Cross Border-Euro": "EUR",
    "Cuba-Chavito": "CUC",
    "Cuba-Peso": "CUP",
    "Cyprus-Euro": "EUR",
    "Czech Republic-Koruna": "CZK",
    "Czech. Republic-Koruna": "CZK",
    "Dem. Rep. of Congo-Congolese Franc": "CDF",
    "Dem. Rep. of Congo-Franc": "CDF",
    "Denmark-Krone": "DKK",
    "Djibouti-Franc": "DJF",
    "Dominican Republic-Peso": "DOP",
    "Ecuador-Dolares": "USD",
    "Egypt-Pound": "EGP",
    "El Salvador-Dollar": "USD",
    "Equatorial Guinea-CFA Franc": "XOF",
    "Eritrea-Nakfa": "ERN",
    "Eritrea-Nakfa Salary Payment": "ERN",
    "Eswatini-Lilangeni": "SZL",
    "Ethiopia-Birr": "ETB",
    "Euro Zone-Euro": "EUR",
    "Finland-Euro": "EUR",
    "Fiji-Dollar": "FJD",
    "France-Euro": "EUR",
    "Gabon-CFA Franc": "XOF",
    "Gambia-Dalasi": "GMD",
    "Georgia-Lari": "GEL",
    "Germany-Euro": "EUR",
    "Ghana-Cedi": "GHS",
    "Greece-Euro": "EUR",
    "Grenada-E.Caribbean Dollar": "XCD",
    "Guatemala-Quentzal": "GTQ",
    "Guatemala-Quetzal": "GTQ",
    "Guinea Bissau-CFA Franc": "XOF",
    "Guinea-Franc": "GNF",
    "Guyana-Dollar": "GYD",
    "Haiti-Gourde": "HTG",
    "Honduras-Lempira": "HNL",
    "Hong Kong-Dollar": "HKD",
    "Hungary-Forint": "HUF",
    "Iceland-Krona": "ISK",
    "India-Rupee": "INR",
    "Indonesia-Rupiah": "IDR",
    "Iran-Rial": "IRR",
    "Iraq-Dinar": "IQD",
    "Ireland-Euro": "EUR",
    "Israel-Shekel": "ILS",
    "Jamaica-Dollar": "JMD",
    "Japan-Yen": "JPY",
    "Jerusalem-Shekel": "ILS",
    "Jordan-Dinar": "JOD",
    "Kazakhstan-Tenge": "KZT",
    "Kenya-Shilling": "KES",
    "Korea-Won": "KRW",
    "Kosovo-Euro": "EUR",
    "Kuwait-Dinar": "KWD",
    "Kyrgyzstan-Som": "KGS",
    "Laos-Kip": "LAK",
    "Latvia-Euro": "EUR",
    "Lebanon-Pound": "LBP",
    "Lesotho-Maloti": "LSL",
    "Liberia-Dollar": "LRD",
    "Libya-Dinar": "LYD",
    "Lithuania-Euro": "EUR",
    "Luxembourg-Euro": "EUR",
    "Madagascar-Ariary": "MGA",
    "Malawi-Kwacha": "MWK",
    "Malaysia-Ringgit": "MYR",
    "Maldives-Rufiyaa": "MVR",
    "Mali-CFA Franc": "XOF",
    "Malta-Euro": "EUR",
    "Marshall Islands-U.S. Dollar": "USD",
    "Mauritania-Ouguiya": "MRU",
    "Mauritius-Rupee": "MUR",
    "Mexico-Peso": "MXN",
    "Micronesia-U.S. Dollar": "USD",
    "Moldova-LEU": "MDL",
    "Mongolia-Tugrik": "MNT",
    "Montenegro-Euro": "EUR",
    "Morocco-Dirham": "MAD",
    "Mozambique-Metical": "MZN",
    "Myanmar-Kyat": "MMK",
    "Nambia-Dollar": "NAD",
    "Nepal-Rupee": "NPR",
    "Netherlands Antilles-Guilder": "ANG",
    "Netherlands-Euro": "EUR",
    "New Zealand-Dollar": "NZD",
    "Nicaragua-Cordoba": "NIO",
    "Niger-CFA Franc": "XOF",
    "Nigeria-Naira": "NGN",
    "Norway-Krone": "NOK",
    "Oman-Rial": "OMR",
    "Pakistan-Rupee": "PKR",
    "Palau-Dollar": "USD",
    "Panama-Balboa": "PAB",
    "Panama-Dolares": "PAB",
    "Papua New Guinea-Kina": "PGK",
    "Paraguay-Guarani": "PYG",
    "Peru-Sol": "PEN",
    "Philippines-Peso": "PHP",
    "Poland-Zloty": "PLN",
    "Portugal-Euro": "EUR",
    "Qatar-Riyal": "QAR",
    "Rep. of N. Macedonia-Denar": "MKD",
    "Rep. of N Macedonia-Dinar": "MKD",
    "Republic of Palau-Dollar": "USD",
    "Romania-New Leu": "RON",
    "Russia-Ruble": "RUB",
    "Rwanda-Franc": "RWF",
    "Sao Tome & Principe-New Dobras": "STN",
    "Saudi Arabia-Riyal": "SAR",
    "Senegal-CFA Franc": "XOF",
    "Serbia-Dinar": "RSD",
    "Seychelles-Rupee": "SCR",
    "Sierra Leone-Leone": "SLL",
    "Sierra Leone-Old Leone": "SLL",
    "Singapore-Dollar": "SGD",
    "Slovakia-Euro": "EUR",
    "Solomon Islands-Dollar": "SBD",
    "Somali-Shilling": "SOS",
    "South Africa-Rand": "ZAR",
    "South Sudan-Sudanese Pound": "SSP",
    "South-Sudanese-Pound": "SSP",
    "Spain-Euro": "EUR",
    "Sri Lanka-Rupee": "LKR",
    "St. Lucia-E. Caribbean Dollar": "XCD",
    "Sudan-Pound": "SDG",
    "Suriname-Dollar": "SRD",
    "Swaziland-Langeni": "SZL",
    "Sweden-Krona": "SEK",
    "Switzerland-Franc": "CHF",
    "Syria-Pound": "SYP",
    "Taiwan-Dollar": "TWD",
    "Tajikistan-Somoni": "TJS",
    "Tanzania-Shilling": "TZS",
    "Thailand-Baht": "THB",
    "Timor-Leste-Dili": "USD",
    "Togo-CFA Franc": "XOF",
    "Tonga-Pa'anga": "TOP",
    "Trinidad & Tobago-Dollar": "TTD",
    "Tunisia-Dinar": "TND",
    "Turkey-New Lira": "TRY",
    "Turkmenistan-New Manat": "TMT",
    "Uganda-Shilling": "UGX",
    "Ukraine-Hryvnia": "UAH",
    "United Arab Emirates-Dirham": "AED",
    "United Kingdom-Pound": "GBP",
    "Uruguay-Peso": "UYU",
    "Uzbekistan-Som": "UZS",
    "Vanuatu-Vatu": "VUV",
    "Venezuela-Bolivar Soberano": "VES",
    "Venezuela-Fuerte (OLD)": "OLD",
    "Vietnam-Dong": "VND",
    "Western Samoa-Tala": "WST",
    "Yemen-Rial": "YER",
    "Zambia-New Kwacha": "ZMW",
    "Zimbabwe-RTGS": "ZWL"
}

# callback function to quit the app
def quit_action(icon, item):
    root.destroy()

# absolute paths to the resource files
image_path = os.path.join(sys._MEIPASS, "TERRA.jpg") if hasattr(sys, '_MEIPASS') else "C:\\Users\\cmcclung\\TERRA\\TERRA.jpg"
icon_path = os.path.join(sys._MEIPASS, "TERRA.ico") if hasattr(sys, '_MEIPASS') else "C:\\Users\\cmcclung\\TERRA\\TERRA.ico"
song_path = os.path.join(sys._MEIPASS, "TERRA.mp3") if hasattr(sys, '_MEIPASS') else "C:\\Users\\cmcclung\\TERRA\\TERRA.mp3"

# paths using sys._MEIPASS for packaged executables
if hasattr(sys, '_MEIPASS'):
    image_path = os.path.join(sys._MEIPASS, "TERRA.jpg")
    icon_path = os.path.join(sys._MEIPASS, "TERRA.ico")
    song_path = os.path.join(sys._MEIPASS, "TERRA.mp3")

def reset_fetch_button():
    fetch_button.config(text="Fetch Data")

def fetch_data(start_date, end_date, selected_option):
    # API endpoint and parameters
    base_url = "https://api.fiscaldata.treasury.gov/services/api/fiscal_service/v1/accounting/od/rates_of_exchange"
    params = {
        "fields": "country_currency_desc,exchange_rate,record_date",
        "filter": f"record_date:gte:{start_date},record_date:lte:{end_date}",
        "page[size]": 100  # Adjust the page size as needed
    }

    # fetch data from the API for all available countries and pages
    all_data = []
    page_number = 1
    while True:
        params["page[number]"] = page_number
        response = requests.get(base_url, params=params)
        if response.status_code == 200:
            page_data = response.json()["data"]
            if not page_data:
                break
            all_data.extend(page_data)
            page_number += 1
        else:
            break

    # process the retrieved data
    conversion_rates = []
    for entry in all_data:
        currency_desc = entry['country_currency_desc']
        exchange_rate = float(entry['exchange_rate'])
        code = currency_codes.get(currency_desc, "")  # Get code from dictionary
        conversion_rates.append((currency_desc, code, exchange_rate))

    # get the path to the "TERRA Output" folder on the Desktop
    output_folder_path = os.path.expanduser("~/Desktop/terra output")
    os.makedirs(output_folder_path, exist_ok=True)

    # generate a dynamic filename based on the selected option
    if selected_option == "select custom date range":
        date_range_filename = f"{start_date}_to_{end_date}"
    else:
        date_range_filename = selected_option.replace(" ", "_").lower()
    output_file_path = os.path.join(output_folder_path, f"exchange_rates_{date_range_filename}.xlsx")

    # create and write the output to an Excel file in the "TERRA Output" folder
    wb = Workbook()
    ws = wb.active

    # name the worksheet
    ws.title = "Exchange Rates"  # Set the name of the worksheet

    # extract all available field names from the API response
    all_field_names = set()
    for entry in all_data:
        all_field_names.update(entry.keys())

    # create headers and write data to the Excel file
    header_row = ["Code"] + list(all_field_names)
    ws.append(header_row)

    for entry in all_data:
        code = currency_codes.get(entry.get('country_currency_desc', ""), "")
        row_data = [code] + [entry.get(field, "") for field in all_field_names]
        ws.append(row_data)

    # auto-adjust column widths
    for column in ws.columns:
        max_length = 0
        column_letter = get_column_letter(column[0].column)
        for cell in column:
            try:
                if len(str(cell.value)) > max_length:
                    max_length = len(str(cell.value))
            except:
                pass
        ws.column_dimensions[column_letter].width = max_length  # Add a small padding

    wb.save(output_file_path)

    print(f"Conversion rates saved to {output_file_path}")

    # update the "Fetch Data" button text to "Saved To Desktop!" temporarily
    fetch_button.config(text="Saved To Desktop!")
    root.after(3000, reset_fetch_button)  # Reset after 3000 milliseconds (3 seconds)

def selected_option_to_dates(selected_option, selected_year):
    if selected_option == "Last Day of PY":
        start_date = f"{selected_year - 1}-12-31"
        end_date = start_date
    elif selected_option == "PY Q1":
        start_date = f"{selected_year - 1}-01-01"
        end_date = f"{selected_year - 1}-03-31"
    elif selected_option == "PY Q2":
        start_date = f"{selected_year - 1}-04-01"
        end_date = f"{selected_year - 1}-06-30"
    elif selected_option == "PY Q3":
        start_date = f"{selected_year - 1}-07-01"
        end_date = f"{selected_year - 1}-09-30"
    elif selected_option == "PY Q4":
        start_date = f"{selected_year - 1}-10-01"
        end_date = f"{selected_year - 1}-12-31"
    elif selected_option == "CY To Date":
        start_date = f"{selected_year}-01-01"
        end_date = current_date
    elif selected_option.startswith("CY Q"):
        quarter_match = re.search(r"CY Q(\d+)", selected_option)
        if quarter_match:
            quarter_number = int(quarter_match.group(1))
            if quarter_number == 1:
                start_date = f"{selected_year}-01-01"
                end_date = f"{selected_year}-03-31"
            elif quarter_number == 2:
                start_date = f"{selected_year}-04-01"
                end_date = f"{selected_year}-06-30"
            elif quarter_number == 3:
                start_date = f"{selected_year}-07-01"
                end_date = f"{selected_year}-09-30"
    else:
        start_date = end_date = None

    return start_date, end_date

# generate available options based on current date
def generate_date_options():
    options = [
        "Last Day of PY",
        "PY Whole",
        "PY Q1",
        "PY Q2",
        "PY Q3",
        "PY Q4",
        "CY To Date"
    ]

    if current_month > 3:
        options.append("CY Q1")
    if current_month > 6:
        options.append("CY Q2")
    if current_month > 9:
        options.append("CY Q3")

    options.append("select custom date range")  # Add the custom range option

    return options

def handle_selection():
    selected_option = combo_var.get()
    selected_year = current_year

    if selected_option == "~~$elect timeframe~~":
        fetch_button.config(text="Try Again!")
        root.after(1000, reset_fetch_button)
        return

    if selected_option == "PY Whole":
        start_date = f"{selected_year - 1}-01-01"
        end_date = f"{selected_year - 1}-12-31"
    elif selected_option == "select custom date range":
        custom_start_date = askstring("start", "Enter start date (YYYY-MM-DD):")
        custom_end_date = askstring("end", "Enter end date (YYYY-MM-DD):")
        start_date = custom_start_date
        end_date = custom_end_date
    else:
        start_date, end_date = selected_option_to_dates(selected_option, selected_year)

    if start_date is not None and end_date is not None:
        fetch_data(start_date, end_date, selected_option)

# GUI setup
root = tk.Tk()
root.title("terra (treasury exchange rate retrieval application)")

# current year and month
current_year = datetime.now().year
current_month = datetime.now().month
current_date = datetime.now().strftime("%Y-%m-%d")

# width of the GUI window based on the title's length
title_width = len(root.title()) * 9  # Adjust the multiplier as needed

# minimum window width to avoid text truncation
root.minsize(title_width, 1)

# Load the image
image_path = os.path.join(os.path.dirname(__file__), "TERRA.jpg")
image = Image.open(image_path)
image = image.resize((300, 300), Image.LANCZOS)  # Use LANCZOS for resampling

# Function to display the image
def display_image():
    photo = ImageTk.PhotoImage(image=image)
    image_label.config(image=photo)
    image_label.image = photo

# generate available options dynamically based on current date
date_range_options = generate_date_options()

# create and position GUI elements
combo_var = tk.StringVar(value=date_range_options)
date_range_label = tk.Label(root, text="Select Date Range:")
date_range_combo = ttk.Combobox(root, textvariable=combo_var, values=date_range_options)

# create and position "Fetch Data" button
fetch_button = tk.Button(root, text="Fetch Data", command=handle_selection)
fetch_button.grid(row=0, column=2, padx=10, pady=10)

# set the initial value of the combobox to "select option"
combo_var.set("~~$elect timeframe~~")

# grid layout
date_range_label.grid(row=0, column=0, padx=10, pady=10)
date_range_combo.grid(row=0, column=1, padx=10, pady=10)
fetch_button.grid(row=0, column=2, padx=10, pady=10)

# create and configure an image label to display the image
image_label = tk.Label(root)
image_label.grid(row=1, column=0, columnspan=3, padx=10, pady=10)

# DISplay the image initially
display_image()

# configure grid weights to center the image_label
root.grid_rowconfigure(1, weight=1)
root.grid_columnconfigure(0, weight=1)
root.grid_columnconfigure(1, weight=1)
root.grid_columnconfigure(2, weight=1)

pygame_initialized = False  # Flag to track Pygame initialization
song_loaded = False  # Flag to track whether the song is loaded

# Determine the initial text for the mute/unmute button (music symbol)
mute_button_text = "♫"

def toggle_mute():
    global pygame_initialized, song_loaded  # Use the global flags

    if not pygame_initialized:
        pygame.mixer.init()  # Initialize Pygame
        pygame_initialized = True  # Set the flag

    if not song_loaded:
        song_path = "TERRA.mp3"
        pygame.mixer.music.load(song_path)
        song_loaded = True  # Set the flag for song loading

    if pygame.mixer.music.get_busy():
        pygame.mixer.music.pause()
        mute_button.config(text="♫")
    else:
        pygame.mixer.music.unpause()
        mute_button.config(text="mute")

        # If music playback hasn't started yet, start it now
        if not pygame.mixer.music.get_busy():
            starting_position = 56  # Start from the 56-second mark
            pygame.mixer.music.play(start=starting_position)

# create a Font object with a smaller size
small_font = font.Font(size=6)

# create and position mute button with a smaller size and text
mute_button = tk.Button(root, text=mute_button_text, command=toggle_mute, width=3, height=1, font=small_font)
mute_button.grid(row=2, column=0, columnspan=3, padx=10, pady=10)

# start GUI event loop
root.mainloop()
